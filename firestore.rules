rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Settings: Allow anyone to read, but no one to write from the client.
    match /settings/global {
      allow read: if true;
      allow write: if false; // Should only be written by admin/backend
    }

    // Users:
    // - Anyone can create their own user document (on signup).
    // - A user can only read or update their own document.
    // - No one can delete a user document from the client.
    match /users/{userId} {
      allow create: if true; // Allows new user registration
      allow read, update: if isOwner(userId);
      allow delete: if false;
    }

    // Stakes:
    // - A user can create a stake for themselves.
    // - A user can only read their own stakes.
    match /stakes/{stakeId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read: if isOwner(get(/databases/$(database)/documents/stakes/$(stakeId)).data.userId);
      allow update, delete: if false; // Updates should be handled by backend
    }

    // Transactions:
    // - A user can create a transaction for themselves (e.g., a deposit request).
    // - A user can only read their own transactions.
    match /transactions/{txId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read: if isOwner(get(/databases/$(database)/documents/transactions/$(txId)).data.userId);
      allow update, delete: if false; // Updates handled by backend
    }
    
    // Payouts (Commission Logs):
    // - Users should only be able to read payouts directed to them.
    // - Payouts are created by the backend only.
    match /payouts/{payoutId} {
        allow read: if isOwner(resource.data.toUserId);
        allow create, update, delete: if false;
    }

    // Affiliate Network Members:
    // - A user can only read the members within their own network subcollection.
    // - Network members are added by the backend only.
    match /affiliateNetworks/{userId}/members/{memberId} {
        allow read: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create, update, delete: if false;
    }
  }
}
