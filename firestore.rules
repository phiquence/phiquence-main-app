rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Settings should only be readable by authenticated users, and writable only by admins
    match /settings/global {
       allow read: if request.auth != null;
       allow write: if request.auth.token.role == 'admin';
    }

    // Users Collection Rules
    match /users/{userId} {
      // READ: A user can only read their own document.
      allow get: if isOwner(userId);
      
      // LIST: No one should be able to list all users.
      allow list: if false;

      // CREATE: A new user can create their own user document upon signup.
      allow create: if isOwner(userId);

      // UPDATE: A user can only update their own document's non-critical fields.
      // Balances should only be updated by server-side logic (functions).
      allow update: if isOwner(userId) && !("balances" in request.resource.data);
    }
    
    // Transactions Collection Rules
    match /transactions/{txId} {
        // A user can read their own transactions.
        allow get: if isOwner(resource.data.userId);
        // Users can't list all transactions, queries must be used.
        allow list: if request.auth != null;
        // Transactions are created by the server (or webhook).
        allow create, update, delete: if false;
    }
    
    // Stakes Collection Rules
    match /stakes/{stakeId} {
       // A user can read their own stakes.
       allow get: if isOwner(resource.data.userId);
       // Queries are allowed for authenticated users (will be filtered by userId in code).
       allow list: if request.auth != null;
       // Stakes are created/updated by the server.
       allow create, update, delete: if false;
    }

    // Payouts (Commissions) Collection Rules
    match /payouts/{payoutId} {
       // A user can read payouts made to them.
       allow get: if isOwner(resource.data.toUserId);
       // Queries are allowed.
       allow list: if request.auth != null;
       // Payouts created by the server.
       allow create, update, delete: if false;
    }
    
     // Trading Sessions
    match /tradingSessions/{sessionId} {
      // Any authenticated user can view a session's details.
      allow get: if request.auth != null;
      
      // Bets within a session
      match /bets/{betId} {
        // A user can read their own bet.
        allow get: if isOwner(resource.data.userId);
        // Bets are created/updated by server logic only.
        allow create, update, delete: if false;
      }
    }

  }
}
